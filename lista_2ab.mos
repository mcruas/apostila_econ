 model PD
 
 uses "mmxprs"

 parameters
	T = 3
	
	at = 50
	c1 = 100
	c2 = 1000
	G1 = 50
	G2 = 50
	Demanda = 150
 end-parameters

 
 declarations
 VOLUMES = {0, 50, 100, 150}
  FCF: array(1..T, {0,50, 100, 150, 200}) of real   
  solucoes: array(1..T, {0,50, 100, 150, 200}, 1..4) of real   
  u,g1,g2, s: mpvar
  melhor : real 
  sol_atual: array(1..3) of real ! em ordem, g1, g2, u e 
  
  !vi, vf : integer
 end-declarations



procedure print_status
! Imprimir na tela o status do solver
	declarations
		status: string
	end-declarations
	case getprobstat of
		XPRS_OPT: status:="Optimum found"
		XPRS_UNF: status:="Unfinished"
		XPRS_INF: status:="Infeasible"
		XPRS_UNB: status:="Unbounded"
		XPRS_OTH: status:="Failed"
		else status:="???"
	end-case
	writeln("Problem status: ", status)
end-procedure


function Resolve_problema(vi:integer, vf: integer, t:integer):real  ! funÃ§Ã£o para teste do algoritmo
	
	declarations
		u: mpvar
		g1: mpvar
		g2: mpvar
		s: mpvar
		p1:mpproblem
	end-declarations
	
	with p1 do
		if (t = T) then
			 	Custo := c1*g1 + c2*g2
			else 
				Custo:= c1*g1 + c2*g2 + FCF(t+1,vf)
		end-if 
		u >= 0
		g1 >= 0
		g2 >= 0
		s >= 0
		vi + at = u + s + vf
		g1 <= G1
		g2 <= G2
		g1 + g2 + u = Demanda
		minimize(Custo)
		status := getprobstat
		!print_status
		sol_atual(1) := getsol(g1)
		sol_atual(2) := getsol(g2)
		sol_atual(3) := getsol(u)
		if (status <> XPRS_OPT) then
			returned:= 1000000000
		else	
			returned:= getobjval
		end-if
	end-do		
end-function


forall (i in 1..(T-1)) do
	t := T - i + 1
	forall (vi in VOLUMES) do
		melhor := 100000000
		melhor_vf := 0
		forall (vf in VOLUMES) do
			atual := Resolve_problema(vi,vf,t)
			if (atual < melhor) then
				melhor := atual	
				melhor_vf := vf
				solucoes(t,vi,1) := sol_atual(1)
				solucoes(t,vi,2) := sol_atual(2)
				solucoes(t,vi,3) := sol_atual(3)
				
				
			end-if			
		end-do
		
		FCF(t,vi) := melhor
		solucoes(t,vi,4) := melhor_vf
		
	end-do	
end-do 
!para t=1
t:=1
melhor := 100000000
melhor_vf := 0
forall (vi in {0,50,100,150,200}) do
	forall (vf in VOLUMES) do
	atual := Resolve_problema(vi,vf,t)
			if (atual < melhor) then
				melhor := atual	
				melhor_vf := vf
				solucoes(t,vi,1) := sol_atual(1)
				solucoes(t,vi,2) := sol_atual(2)
				solucoes(t,vi,3) := sol_atual(3)

	end-if			
	end-do
		FCF(t,vi) := melhor
		solucoes(t,vi,4) := melhor_vf

end-do		
		

end-model
